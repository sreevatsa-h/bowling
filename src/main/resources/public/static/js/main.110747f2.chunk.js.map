{"version":3,"sources":["logo.svg","Components/Navigation/style.js","Components/Navigation/navigation.js","assets/bowling2.jpeg","Components/Games/style.js","Components/Games/Game.js","Api/api.js","App.js","reportWebVitals.js","index.js"],"names":["drawerWidth","navStyles","makeStyles","theme","navbar","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","Navigation","setRulesDialogOpen","classes","className","CssBaseline","AppBar","position","clsx","Toolbar","Typography","variant","noWrap","style","Tooltip","title","placement","IconButton","color","onClick","useStyles","bullet","margin","transform","fontSize","backgroundImage","bowling2","backgroundSize","textShadowColor","textShadowOffset","height","textShadowRadius","opacity","pos","marginBottom","gridParent","contentContainer","addNew","borderRadius","borderStyle","borderColor","marginTop","addButton","flexBox","cardListItem","gameCard","textTransform","strikeBorder","spareBorder","strikeMissBorder","normalCell","ruleList","Transition","React","forwardRef","props","ref","Slide","direction","Alert","elevation","Game","openRulesDialog","closeDialogRules","useState","games","setGames","isLoading","setLoading","openCreateGame","setCreateGameDialog","value","setValue","playerCreationList","setPlayers","showSuccess","setSuccess","showWarning","setWarning","showError","setError","getGames","setGetGames","isCreatingGame","setCreatingGame","openGameCard","setOpenGameCardDialog","selectedGameCard","setGameCardId","isRolling","setRolling","openPlayerCard","setOpenPlayerCard","selectedPlayer","setSelectedPlayer","rulesObject","setRules","localRuleSet","setLocalRule","rulesLoader","setRulesLoader","maxPlayers","setMaxPlayers","maxGames","setMaxGames","deleteGameSpinner","setDeleteGameSpinner","playerCreationProblemIndex","setPlayerCreationProblemIndex","useEffect","fetch","then","data","json","rulesResponse","console","log","sort","rule1","rule2","id","updateMaxPlayers","updateMaxGames","jsonResponse","showCreateGameMenu","handleClose","handlePlayerCardClose","handleGameCardClose","handleSliderChange","event","newValue","handleInputChange","target","Number","handleBlur","forEach","rule","ruleName","setPlayerName","newPlayerList","name","addPlayers","valuesToAdd","showWarn","length","player","push","deletePlayer","splice","closeSnackbar","deleteAllPlayers","newGame","problemIndex","playerNames","isError","index","payload","requestOptions","method","headers","body","JSON","stringify","createGame","reason","newGamesList","getTopScorer","game","topScoringIndex","topScore","players","score","getMaxLaneNumber","laneMap","indexOf","laneNumber","firstElement","secondElement","getPlayersInLane","playersInLane","rulesUpdate","updateRules","newRuleSet","closeRulesDialog","gameDelete","gameId","callRollBall","rollBall","newGamesObject","gameIndex","ongoing","playerIndex","rollsAsList","gridListJSX","GridList","cellHeight","gridList","cols","map","GridListTile","Button","Card","CardContent","gutterBottom","TableContainer","component","Paper","Table","table","aria-label","TableBody","TableRow","TableCell","scope","align","lanes","maxPlayersInLane","Dialog","open","TransitionComponent","onClose","aria-labelledby","aria-describedby","maxWidth","fullWidth","DialogTitle","DialogContent","flexDirection","flex","overflowY","TableHead","openPlayerCardDialog","Divider","orientation","flexItem","DialogActions","CircularProgress","disabled","playerCard","CardActionArea","Avatar","alt","src","nStrikes","nMissedStrikes","nSpares","CardActions","size","generateRulesDialog","ruleDescription","Input","placeholder","inputProps","type","onChange","textValue","ruleId","ruleFoundLocally","newLocalRuleSet","updateRuleLocally","LinearProgress","ListItem","ListItemAvatar","TextField","defaultValue","error","helperText","ListItemSecondaryAction","edge","Grid","container","item","xs","Slider","min","max","input","onBlur","step","Snackbar","status","autoHideDuration","severity","message","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.110747f2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { makeStyles } from '@material-ui/core/styles';\n\nconst drawerWidth = 240;\n\nconst navStyles = makeStyles((theme) => ({\n  navbar: {\n    display: 'flex',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n}));\n\nexport default navStyles;","import React from 'react';\nimport clsx from 'clsx';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport navStyles from './style'\nimport ListIcon from '@material-ui/icons/List';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { getRules } from '../../Api/api'\n\nconst Navigation = ({ setRulesDialogOpen }) => {\n\n    const classes = navStyles();\n    const viewRulesDialog = () => {\n        setRulesDialogOpen(true)\n    }\n\n    return (\n        <div className={classes.navbar}>\n            <CssBaseline />\n            <AppBar\n                position=\"fixed\"\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: false,\n                })}\n            >\n                <Toolbar>\n                    <Typography variant=\"h6\" noWrap style={{ flexGrow: 1 }}>\n                    </Typography>\n                    <Tooltip title=\"View/Change Rules\" placement=\"bottom\">\n                        <IconButton color=\"inherit\" onClick={viewRulesDialog}><ListIcon /></IconButton>\n                    </Tooltip>\n                </Toolbar>\n            </AppBar>\n            <main\n                className={clsx(classes.content, {\n                    [classes.contentShift]: false,\n                })}\n            >\n                <div className={classes.drawerHeader} />\n            </main>\n        </div>\n    );\n}\n\nexport default Navigation;\n","export default __webpack_public_path__ + \"static/media/bowling2.561ea16e.jpeg\";","import { makeStyles } from '@material-ui/core/styles';\nimport bowling2 from '../../assets/bowling2.jpeg'\n\nconst useStyles = makeStyles({\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 100,\n        backgroundImage: `url(${bowling2})`,\n        backgroundSize: 'cover',\n        color: \"white\",\n        textShadowColor: 'black',\n        textShadowOffset: { width: -1, height: 1 },\n        textShadowRadius: 10,\n        opacity: 0.6\n    },\n    pos: {\n        marginBottom: 12,\n    },\n\n    gridParent: {\n        marginLeft: 10,\n        marginRight: 10\n    },\n\n    contentContainer: {\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        alignItems: \"center\"\n    },\n\n    addNew: {\n        borderRadius: 10,\n        borderStyle: \"dashed\",\n        borderColor: \"grey\",\n        marginBottom: 10,\n        marginTop: 10\n    },\n\n    addButton: {\n        height: \"100%\",\n        width: \"100%\",\n        borderRadius: 10\n    },\n\n    flexBox: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    },\n\n    cardListItem: {\n        width: \"100%\"\n    },\n\n    gameCard: {\n        textTransform: \"none\"\n    },\n\n    strikeBorder: {\n        color: \"red\",\n    },\n\n    spareBorder: {\n        color: \"blue\",\n    },\n\n    strikeMissBorder: {\n        color: \"grey\",\n    },\n\n    normalCell: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n    },\n\n    ruleList: {\n        margin: 10\n    }\n});\n\nexport default useStyles;\n\nexport const classList = (classes) => {\n    return Object\n        .entries(classes)\n        .filter(entry => entry[1])\n        .map(entry => entry[0])\n        .join(' ');\n}","import React, { useEffect, useState } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport useStyles from './style';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport { getAllGames, createGame, rollBall, getPlayerStats, getRules, updateRules, deleteGame } from '../../Api/api';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Slider from '@material-ui/core/Slider';\nimport Grid from '@material-ui/core/Grid';\nimport Input from '@material-ui/core/Input';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst Alert = (props) => {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst Game = ({ openRulesDialog, closeDialogRules }) => {\n\n    const classes = useStyles();\n    const [games, setGames] = useState([]);\n    const [isLoading, setLoading] = useState(true)\n    const [openCreateGame, setCreateGameDialog] = useState(false)\n    const [value, setValue] = useState(1);\n    const [playerCreationList, setPlayers] = useState([{ \"name\": \"\" }]);\n    const [showSuccess, setSuccess] = useState({ \"status\": false, \"message\": null })\n    const [showWarning, setWarning] = useState({ \"status\": false, \"message\": null })\n    const [showError, setError] = useState({ \"status\": false, \"message\": null })\n    const [getGames, setGetGames] = useState(true)\n    const [isCreatingGame, setCreatingGame] = useState(false)\n    const [openGameCard, setOpenGameCardDialog] = useState(false)\n    const [selectedGameCard, setGameCardId] = useState(null)\n    const [isRolling, setRolling] = useState(false)\n    const [openPlayerCard, setOpenPlayerCard] = useState(false)\n    const [selectedPlayer, setSelectedPlayer] = useState(false)\n    const [rulesObject, setRules] = useState([])\n    const [localRuleSet, setLocalRule] = useState([])\n    const [rulesLoader, setRulesLoader] = useState(false)\n    const [maxPlayers, setMaxPlayers] = useState(0)\n    const [maxGames, setMaxGames] = useState(0)\n    const [deleteGameSpinner, setDeleteGameSpinner] = useState(false)\n    const [playerCreationProblemIndex, setPlayerCreationProblemIndex] = useState({});\n\n    useEffect(() => {\n        getRules()\n            .then(data => data.json()\n                .then((rulesResponse) => {\n                    console.log(\"Rules response!!\", rulesResponse);\n                    rulesResponse.sort((rule1, rule2) => {\n                        if (rule1.id > rule2.id) {\n                            return 1;\n                        }\n\n                        else {\n                            return -1;\n                        }\n                    })\n                    setRules(rulesResponse)\n                    updateMaxPlayers();\n                    updateMaxGames();\n                }))\n        getAllGames()\n            .then(data => data.json()\n                .then(jsonResponse => {\n                    console.log(jsonResponse);\n                    setGames(jsonResponse);\n                    setLoading(false)\n                    setGetGames(false)\n                })\n            )\n    }, [getGames])\n\n    useEffect(() => {\n        console.log(\"openRulesDialog CHANGED\", openRulesDialog)\n    }, [openRulesDialog])\n\n    const showCreateGameMenu = () => {\n        setCreateGameDialog(true);\n    }\n\n    const showGameCard = (id) => {\n        console.log(\"game card\", id)\n        setGameCardId(id)\n        setOpenGameCardDialog(true)\n    }\n\n    const handleClose = () => {\n        setCreateGameDialog(false);\n        setPlayers([{ \"name\": \"\" }])\n        setPlayerCreationProblemIndex({})\n    }\n\n    const handlePlayerCardClose = () => {\n        setOpenPlayerCard(false);\n        setSelectedPlayer(null);\n    }\n\n    const handleGameCardClose = () => {\n        setOpenGameCardDialog(false)\n    }\n\n    const handleSliderChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const handleInputChange = (event) => {\n        setValue(event.target.value === '' ? 0 : (Number(event.target.value) > maxPlayers ? maxPlayers : Number(event.target.value)));\n    };\n\n    const handleBlur = () => {\n        if (value < 0) {\n            setValue(0);\n        } else if (value > 100) {\n            setValue(100);\n        }\n    };\n\n    const updateMaxPlayers = () => {\n        rulesObject.forEach((rule) => {\n            if (rule.ruleName == \"max_players\") {\n                setMaxPlayers(rule.value)\n            }\n        })\n    }\n\n    const updateMaxGames = () => {\n        rulesObject.forEach((rule) => {\n            if (rule.ruleName == \"max_games\") {\n                setMaxGames(rule.value)\n            }\n        })\n    }\n\n    const openPlayerCardDialog = (player) => {\n        setSelectedPlayer(player)\n        setOpenPlayerCard(true)\n    }\n\n    const setPlayerName = (event) => {\n        let newPlayerList = [...playerCreationList]\n        newPlayerList[event.target.id].name = event.target.value;\n        setPlayers(newPlayerList)\n    }\n\n    const addPlayers = (event) => {\n        console.log(\"ADDING PLAYERS\")\n        let valuesToAdd = 0\n        let showWarn = false;\n        let newPlayerList = [...playerCreationList]\n        if (value + playerCreationList.length > maxPlayers) {\n            valuesToAdd = maxPlayers - playerCreationList.length\n            showWarn = true;\n        } else {\n            valuesToAdd = value;\n        }\n\n        for (let player = 0; player < valuesToAdd; player++) {\n            newPlayerList.push({ \"name\": \"\" });\n        }\n\n        if (showWarn == true) {\n            setWarning({ \"status\": true, \"message\": \"Cannot add more than \" + maxPlayers + \" players\" })\n        }\n\n        setPlayers(newPlayerList);\n\n    }\n\n    const deletePlayer = (event) => {\n\n        if (playerCreationList.length == 1) {\n            setError({ \"status\": true, \"message\": \"Minimum 1 player required to start game\" })\n            return;\n        }\n        let newPlayerList = [...playerCreationList]\n        newPlayerList.splice(event.target.id, 1);\n        setPlayers(newPlayerList)\n    }\n\n    const closeSnackbar = () => {\n        setSuccess({ \"status\": false, \"message\": null })\n        setWarning({ \"status\": false, \"message\": null })\n        setError({ \"status\": false, \"message\": null })\n    }\n\n    const deleteAllPlayers = () => {\n        if (playerCreationList.length == 1) {\n            setError({ \"status\": true, \"message\": \"Minimum 1 player required to start game\" })\n            return;\n        }\n        setPlayers([{ \"name\": \"\" }]);\n    }\n\n    const newGame = () => {\n        setCreatingGame(true)\n        let problemIndex = {};\n        let playerNames = {};\n        let isError = false;\n        playerCreationList.forEach((player, index) => {\n            if (player.name == null || player.name == \"\") {\n                problemIndex[index] = \"Name cannot be null\";\n                isError = true;\n            }\n\n            if (playerNames[player.name] == null) {\n                playerNames[player.name] = index;\n            } else {\n                isError = true;\n                problemIndex[index] = \"Name cannot be duplicate\";\n                problemIndex[playerNames[player.name]] = \"Name cannot be duplicate\";\n            }\n        })\n\n        console.log(\"PROBLEM INDEX: \", problemIndex)\n        console.log(\"PLAYER LIST: \", playerCreationList)\n\n        if (isError == true) {\n            setCreatingGame(false)\n            setPlayerCreationProblemIndex(problemIndex);\n        } else {\n            createGame(playerCreationList)\n                .then(data => data.json()\n                    .then(jsonResponse => {\n                        if (jsonResponse.reason != null) {\n                            setCreatingGame(false)\n                            setError({ \"status\": true, \"message\": jsonResponse.reason })\n                        } else {\n                            let newGamesList = [...games];\n                            newGamesList.push(jsonResponse);\n                            setGames(newGamesList)\n                            setSuccess({ \"status\": true, \"message\": \"Game created succesfully\" })\n                            setCreatingGame(false)\n                            handleClose()\n                        }\n                    }))\n\n        }\n    }\n\n    const getTopScorer = (game) => {\n        let topScoringIndex = 0;\n        let topScore = 0.0;\n\n        game.players.forEach((value, index) => {\n            if (value.score > topScore) {\n                topScore = value.score\n                topScoringIndex = index\n            }\n        })\n\n        return game.players[topScoringIndex];\n    }\n\n    const getMaxLaneNumber = (game) => {\n        let laneMap = [];\n        game.players.forEach((player) => {\n            if (laneMap.indexOf(player.laneNumber) == -1) {\n                laneMap.push(player.laneNumber);\n            }\n        })\n\n        laneMap.sort((firstElement, secondElement) => {\n            if (firstElement > secondElement) {\n                return 1;\n            }\n\n            else {\n                return -1;\n            }\n        })\n        return laneMap;\n    }\n\n    const getPlayersInLane = (game, laneNumber) => {\n        let playersInLane = [];\n        game.players.forEach((player) => {\n            if (player.laneNumber == laneNumber) {\n                playersInLane.push(player);\n            }\n        })\n\n        return playersInLane;\n    }\n\n    const rulesUpdate = () => {\n        setRulesLoader(true)\n        updateRules(localRuleSet)\n            .then(data => data.json()\n                .then((newRuleSet) => {\n                    if (newRuleSet.reason != null) {\n                        setRulesLoader(false)\n                        setError({ \"status\": true, \"message\": newRuleSet.reason })\n                    }\n\n                    else {\n                        newRuleSet.sort((rule1, rule2) => {\n                            if (rule1.id > rule2.id) {\n                                return 1;\n                            }\n\n                            else {\n                                return -1;\n                            }\n                        })\n                        setRules(newRuleSet)\n                        setRulesLoader(false)\n                        setSuccess({ \"status\": true, \"message\": \"Rule(s) updated succesfully\" })\n                        closeRulesDialog();\n                        updateMaxPlayers();\n                    }\n                }))\n    }\n\n    const updateRuleLocally = (value, ruleId) => {\n        console.log(\"New rule!!!!\", value, ruleId)\n        let ruleFoundLocally = false;\n        let newLocalRuleSet = [...localRuleSet]\n        localRuleSet.forEach((rule, index) => {\n            if (rule.id == ruleId) {\n                ruleFoundLocally = true;\n                newLocalRuleSet[index].value = value;\n            }\n        })\n\n        if (!ruleFoundLocally) {\n            newLocalRuleSet.push({ \"id\": ruleId, \"value\": value })\n        }\n\n        console.log(\"LOCAL RULE SET: \", newLocalRuleSet);\n\n        setLocalRule(newLocalRuleSet);\n    }\n\n    const closeRulesDialog = () => {\n        setLocalRule([])\n        closeDialogRules();\n    }\n\n    // const checkForExtraRoll = (game) => {\n    //     let hasReturned = false;\n    //     game.players.forEach((player) => {\n    //         if (player.rollsAsList.length == 21) {\n    //             console.log(\"RETURNING TRUE FOR GAME \", game)\n    //             hasReturned = true;\n    //             return true;\n    //         }\n    //     })\n\n    //     if (hasReturned == false) {\n\n    //         console.log(\"RETURNING FALSE!!!!! FOR GAME \", game)\n\n    //         return false;\n    //     }\n    // }\n\n    const gameDelete = (index) => {\n        setDeleteGameSpinner(true)\n        deleteGame(games[index].gameId)\n            .then(data => data.json()\n                .then((jsonResponse) => {\n                    console.log(\"GAME DELETED\", jsonResponse)\n                    setDeleteGameSpinner(false)\n                    setWarning({ \"status\": true, \"message\": \"Game with ID \" + games[index].gameId + \" deleted\" })\n                    handleGameCardClose();\n                    games.splice(index, 1);\n                }))\n    }\n\n    const callRollBall = (gameId) => {\n        setRolling(true)\n        rollBall(gameId)\n            .then(data => data.json()\n                .then((jsonResponse) => {\n                    console.log(\"ROLLED BALL, result: \", jsonResponse)\n                    setRolling(false)\n                    let newGamesObject = [...games];\n                    newGamesObject.forEach((game, gameIndex) => {\n                        if (game.gameId == gameId) {\n                            if (jsonResponse[-1] == -1) {\n                                newGamesObject[gameIndex].ongoing = false;\n                            } else {\n                                newGamesObject[gameIndex].ongoing = true;\n                            }\n                            game.players.forEach((player, playerIndex) => {\n                                newGamesObject[gameIndex].players[playerIndex].rollsAsList.push(jsonResponse[player.id])\n                                if (jsonResponse[player.id] != -1) {\n                                    newGamesObject[gameIndex].players[playerIndex].score += jsonResponse[player.id];\n                                }\n                                if (newGamesObject[gameIndex].players[playerIndex].rollsAsList.length % 2 == 0 && newGamesObject[gameIndex].players[playerIndex].rollsAsList.length >= 1 && (newGamesObject[gameIndex].players[playerIndex].rollsAsList[newGamesObject[gameIndex].players[playerIndex].rollsAsList.length - 1] + newGamesObject[gameIndex].players[playerIndex].rollsAsList[newGamesObject[gameIndex].players[playerIndex].rollsAsList.length - 2] == 10)) {\n                                    newGamesObject[gameIndex].players[playerIndex].score += 5;\n                                }\n\n                                if (jsonResponse[player.id] == 10) {\n                                    newGamesObject[gameIndex].players[playerIndex].score += 10;\n                                }\n                            })\n                        }\n                    })\n\n                    setGames(newGamesObject);\n                    console.log(\"NEW GAME OBJECT!!!\", newGamesObject)\n                }))\n    }\n\n    const gridListJSX = () => {\n        if (games != null) {\n            return (\n                <GridList cellHeight={'auto'} className={classes.gridList} cols={4} spacing={10}>\n                    {games.map((game, gameIndex) => {\n                        return (\n\n\n                            <GridListTile id={game.gameId} className={classes.gameCard}>\n\n                                <Button id={game.gameId} onClick={() => { showGameCard(gameIndex) }} className={classes.gameCard}>\n                                    <Card variant=\"outlined\">\n                                        <CardContent>\n\n                                            <Typography className={classes.title} gutterBottom>\n                                                {game.gameId}\n                                            </Typography>\n\n                                            <div className={classes.contentContainer}>\n\n                                                <TableContainer component={Paper}>\n                                                    <Table className={classes.table} aria-label=\"simple table\">\n                                                        <TableBody>\n\n                                                            <TableRow key=\"gameId\">\n                                                                <TableCell component=\"th\" scope=\"row\">\n                                                                    Game ID:\n                                                                    </TableCell>\n                                                                <TableCell align=\"right\">{game.gameId}</TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow key=\"nPlayers\">\n                                                                <TableCell component=\"th\" scope=\"row\">\n                                                                    Number of Players:\n                                                                    </TableCell>\n                                                                <TableCell align=\"right\">{game.players.length}</TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow key=\"nLanes\">\n                                                                <TableCell component=\"th\" scope=\"row\">\n                                                                    Number of Lanes:\n                                                                    </TableCell>\n                                                                <TableCell align=\"right\">{game.lanes}</TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow key=\"mPlayerLane\">\n                                                                <TableCell component=\"th\" scope=\"row\">\n                                                                    Maximum players per lane:\n                                                                    </TableCell>\n                                                                <TableCell align=\"right\">{game.maxPlayersInLane}</TableCell>\n                                                            </TableRow>\n\n                                                            <TableRow key=\"topScorer\">\n                                                                <TableCell component=\"th\" scope=\"row\">\n                                                                    {\n                                                                        game.ongoing == true ? \"Current top scorer:\" : \"Winner:\"\n                                                                    }\n\n                                                                </TableCell>\n                                                                <TableCell align=\"right\">{getTopScorer(game).name} (Lane: {getTopScorer(game).laneNumber} Points: {getTopScorer(game).score})</TableCell>\n                                                            </TableRow>\n\n                                                        </TableBody>\n                                                    </Table>\n                                                </TableContainer>\n                                            </div>\n                                        </CardContent>\n                                    </Card>\n                                </Button>\n                            </GridListTile>\n                        )\n\n\n\n                    })}\n\n                    {\n\n                        games.length >= maxGames ? null :\n\n                            <GridListTile className={classes.addNew}>\n\n                                <Tooltip title=\"Create new game\" placement=\"right\">\n                                    <Button className={classes.addButton} onClick={showCreateGameMenu}>\n                                        <AddCircle fontSize=\"large\" />\n                                    </Button>\n                                </Tooltip>\n                            </GridListTile>\n                    }\n\n                </GridList>\n            )\n        }\n    }\n\n    const createGameJSX = () => {\n        return (\n            <Dialog\n                open={openCreateGame}\n                TransitionComponent={Transition}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n                maxWidth='lg'\n                fullWidth={true}\n            >\n                <DialogTitle id=\"alert-dialog-slide-title\">{\"Create new game\"}</DialogTitle>\n                <DialogContent style={{ display: \"flex\" }}>\n                    <div style={{ flex: 2, overflowY: \"auto\" }}>\n                        <List>\n                            {playerCreationList.map((player, index) => {\n\n                                return (\n\n                                    <ListItem alignItems=\"flex-start\" id={index}>\n                                        <ListItemAvatar>\n                                            <Avatar alt={player.name} src=\"/static/images/avatar/1.jpg\" />\n                                        </ListItemAvatar>\n                                        <TextField id={index} defaultValue={player.name} placeholder=\"Player Name\" onChange={setPlayerName} error={playerCreationProblemIndex[index] == null ? false : true} helperText={playerCreationProblemIndex[index]} />\n\n                                        <ListItemSecondaryAction>\n                                            <IconButton edge=\"end\" aria-label=\"delete\" id={index} onClick={deletePlayer}>\n                                                <DeleteIcon />\n                                            </IconButton>\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                )\n                            })}\n                            <Divider variant=\"inset\" component=\"li\" />\n                        </List>\n                    </div>\n\n                    <div style={{ flex: 1 }}></div>\n\n                    <div style={{ flex: 2, marginRight: 10 }}>\n                        <Typography id=\"input-slider\" gutterBottom>\n                            Add players\n                                </Typography>\n                        <Grid container spacing={2} alignItems=\"center\">\n                            <Grid item xs>\n                                <Slider\n                                    value={typeof value === 'number' ? value : 0}\n                                    onChange={handleSliderChange}\n                                    aria-labelledby=\"input-slider\"\n                                    min={1}\n                                    max={maxPlayers}\n                                />\n                            </Grid>\n                            <Grid item>\n                                <Input\n                                    className={classes.input}\n                                    value={value}\n                                    margin=\"dense\"\n                                    onChange={handleInputChange}\n                                    onBlur={handleBlur}\n                                    inputProps={{\n                                        step: 1,\n                                        min: 1,\n                                        max: maxPlayers,\n                                        type: 'number',\n                                        'aria-labelledby': 'input-slider',\n                                    }}\n                                />\n                            </Grid>\n                        </Grid>\n                        <Grid container spacing={2} alignItems=\"flex-start\">\n                            <Grid item>\n                                <Button variant=\"contained\" color=\"primary\" onClick={addPlayers}>\n                                    Add player{value > 1 ? \"s\" : \"\"}\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <Button variant=\"contained\" color=\"secondary\" onClick={deleteAllPlayers}>\n                                    Delete all players\n                                        </Button>\n                            </Grid>\n                        </Grid>\n                    </div>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>\n                        Cancel\n                            </Button>\n                    <Button onClick={newGame} color=\"primary\" disabled={isCreatingGame}>\n                        {isCreatingGame ? <CircularProgress /> : \"Create\"}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        )\n    }\n\n    const snackbarJSX = () => {\n        return (\n            <div>\n                <Snackbar open={showSuccess.status} autoHideDuration={2000} onClose={closeSnackbar}>\n                    <Alert severity=\"success\">\n                        {showSuccess.message}\n                    </Alert>\n                </Snackbar>\n\n                <Snackbar open={showWarning.status} autoHideDuration={2000} onClose={closeSnackbar}>\n                    <Alert severity=\"warning\">\n                        {showWarning.message}\n                    </Alert>\n                </Snackbar>\n\n                <Snackbar open={showError.status} autoHideDuration={2000} onClose={closeSnackbar}>\n                    <Alert severity=\"error\">\n                        {showError.message}\n                    </Alert>\n                </Snackbar>\n            </div>\n        )\n    }\n\n    const gameCard = () => {\n        if (games[selectedGameCard] != null) {\n\n\n            return (\n                <Dialog\n                    open={openGameCard}\n                    TransitionComponent={Transition}\n                    onClose={handleGameCardClose}\n                    aria-labelledby=\"alert-dialog-slide-title\"\n                    aria-describedby=\"alert-dialog-slide-description\"\n                    maxWidth='lg'\n                    fullWidth={true}\n                >\n                    <DialogTitle id=\"alert-dialog-slide-title\">{\"Game \" + games[selectedGameCard].gameId + \" stats\"}</DialogTitle>\n                    <DialogContent style={{ display: \"flex\", flexDirection: \"column\" }}>\n                        {\n                            getMaxLaneNumber(games[selectedGameCard]).map((laneNumber) => {\n\n                                return (\n\n\n                                    <div style={{ flex: 2, overflowY: \"auto\" }}>\n\n                                        <h3>Lane {laneNumber}</h3>\n                                        <TableContainer component={Paper}>\n                                            <Table className={classes.table} aria-label=\"simple table\">\n                                                <TableHead>\n                                                    <TableRow>\n                                                        <TableCell>Player Name</TableCell>\n                                                        {\n                                                            ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).map((data) => {\n                                                                return <TableCell align=\"right\">Frame {data}</TableCell>\n                                                            })\n                                                        }\n                                                        <TableCell>Score</TableCell>\n\n                                                    </TableRow>\n                                                </TableHead>\n                                                <TableBody>\n\n                                                    {\n                                                        getPlayersInLane(games[selectedGameCard], laneNumber).map((player) => {\n\n                                                            return (\n\n                                                                <TableRow key=\"row1\">\n\n                                                                    <TableCell align=\"left\" component=\"th\" scope=\"row\" >\n                                                                        <Button style={{ textTransform: \"none\" }} onClick={() => { openPlayerCardDialog(player) }}>\n                                                                            {player.name}\n                                                                        </Button>\n                                                                    </TableCell>\n\n                                                                    {\n                                                                        ([0, 2, 4, 6, 8, 10, 12, 14, 16, 18]).map((index) => {\n                                                                            return (\n                                                                                <TableCell align=\"right\" component=\"th\" scope=\"row\">\n                                                                                    <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }} className={`${((player.rollsAsList[index] + player.rollsAsList[index + 1]) == 10 && (player.rollsAsList[index] != 0 && player.rollsAsList[index + 1] != 0)) && classes.spareBorder} ${(player.rollsAsList[index] + player.rollsAsList[index + 1]) == 9 && classes.strikeMissBorder}`}>\n                                                                                        <div className={(player.rollsAsList[index] == 10) && classes.strikeBorder} style={{ flex: 2 }}>\n                                                                                            {player.rollsAsList[index] == null ? '' : player.rollsAsList[index] == 10 ? \"X\" : player.rollsAsList[index]}\n                                                                                        </div>\n                                                                                        <div style={{ flex: 1 }}>\n                                                                                            <Divider orientation=\"vertical\" flexItem />\n                                                                                        </div>\n                                                                                        <div style={{ flex: 2 }} className={(player.rollsAsList[index + 1] == 10) && classes.strikeBorder}>\n                                                                                            {player.rollsAsList[index] == null ? '' : player.rollsAsList[index + 1] == 10 ? \"X\" : player.rollsAsList[index + 1]}\n                                                                                        </div>\n\n                                                                                        {index == 18 ?\n                                                                                            <div style={{ flex: 3 }} className={(player.rollsAsList[index + 2] == 10) && classes.strikeBorder}>\n                                                                                                {player.rollsAsList[index + 2] == null ? '-' : player.rollsAsList[index + 2] == 10 ? \"X\" : player.rollsAsList[index + 2] == -1 ? \"-\" : player.rollsAsList[index + 2]}\n                                                                                            </div>\n                                                                                            : null}\n                                                                                    </div>\n                                                                                </TableCell>\n                                                                            )\n                                                                        })\n                                                                    }\n\n                                                                    <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                                                                        {player.score}\n                                                                    </TableCell>\n\n                                                                </TableRow>\n                                                            )\n\n                                                        })\n\n\n                                                    }\n\n                                                </TableBody>\n                                            </Table>\n                                        </TableContainer>\n                                    </div>\n\n                                )\n\n                            })\n                        }\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => { gameDelete(selectedGameCard) }} color=\"secondary\">\n                            {deleteGameSpinner ? <CircularProgress /> : \"Delete\"}\n                        </Button>\n                        <Button onClick={handleGameCardClose}>\n                            Close\n                            </Button>\n                        <Button onClick={() => { callRollBall(games[selectedGameCard].gameId) }} color=\"primary\" disabled={isRolling || !games[selectedGameCard].ongoing}>\n                            {isRolling ? <CircularProgress /> : \"Roll\"}\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            )\n        }\n        else {\n            return null;\n        }\n    }\n\n    const playerCard = () => {\n        if (selectedPlayer != null) {\n\n\n            return (\n                <Dialog\n                    open={openPlayerCard}\n                    TransitionComponent={Transition}\n                    onClose={handlePlayerCardClose}\n                    aria-labelledby=\"alert-dialog-slide-title\"\n                    aria-describedby=\"alert-dialog-slide-description\"\n                    maxWidth='xs'\n                    fullWidth={true}\n                >\n\n\n                    <Card>\n                        <CardActionArea>\n                            <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", marginTop: 10 }}>\n                                <Avatar alt={selectedPlayer.name} src=\"/static/images/avatar/1.jpg\" style={{ width: 100, height: 100, fontSize: 40 }} />\n                            </div>\n                            <CardContent>\n                                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                    {selectedPlayer.name}\n                                </Typography>\n                                <TableContainer component={Paper}>\n                                    <Table className={classes.table} aria-label=\"simple table\">\n                                        <TableBody>\n\n                                            <TableRow key=\"userDetails\">\n                                                <TableCell component=\"th\" scope=\"row\">\n                                                    Lane Number\n                                                    </TableCell>\n                                                <TableCell align=\"right\">{selectedPlayer.laneNumber}</TableCell>\n                                            </TableRow>\n\n                                            <TableRow key=\"userDetails\">\n                                                <TableCell component=\"th\" scope=\"row\">\n                                                    Number of strikes\n                                                    </TableCell>\n                                                <TableCell align=\"right\">{selectedPlayer.nStrikes}</TableCell>\n                                            </TableRow>\n\n                                            <TableRow key=\"userDetails\">\n                                                <TableCell component=\"th\" scope=\"row\">\n                                                    Missed strikes\n                                                    </TableCell>\n                                                <TableCell align=\"right\">{selectedPlayer.nMissedStrikes}</TableCell>\n                                            </TableRow>\n\n                                            <TableRow key=\"userDetails\">\n                                                <TableCell component=\"th\" scope=\"row\">\n                                                    Number of spares\n                                                    </TableCell>\n                                                <TableCell align=\"right\">{selectedPlayer.nSpares}</TableCell>\n                                            </TableRow>\n\n                                            <TableRow key=\"userDetails\">\n                                                <TableCell component=\"th\" scope=\"row\">\n                                                    Score\n                                                    </TableCell>\n                                                <TableCell align=\"right\">{selectedPlayer.score}</TableCell>\n                                            </TableRow>\n\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                            </CardContent>\n                        </CardActionArea>\n                        <CardActions>\n                            <Button size=\"small\" color=\"primary\" onClick={handlePlayerCardClose}>\n                                Close\n                            </Button>\n                        </CardActions>\n                    </Card>\n\n                </Dialog>\n            )\n        }\n    }\n\n    const generateRulesDialog = () => {\n        if (rulesObject != null) {\n\n\n            return (\n                <Dialog\n                    open={openRulesDialog}\n                    TransitionComponent={Transition}\n                    onClose={closeRulesDialog}\n                    aria-labelledby=\"alert-dialog-slide-title\"\n                    aria-describedby=\"alert-dialog-slide-description\"\n                    maxWidth='sm'\n                    fullWidth={true}\n\n\n                >\n\n                    <div className={classes.ruleList}>\n                        <h1>Rules</h1>\n\n                        {\n                            rulesObject.map((rule) => {\n\n                                return (\n                                    <GridList cellHeight={'auto'} cols={2} spacing={10}>\n                                        <GridListTile>\n                                            <Typography>{rule.ruleDescription}</Typography>\n                                        </GridListTile>\n\n                                        <GridListTile align=\"right\">\n                                            <Input placeholder={rule.value} inputProps={{ type: \"number\" }} onChange={(textValue) => { updateRuleLocally(textValue.target.value, rule.id) }} />\n                                        </GridListTile>\n                                    </GridList>\n                                )\n\n                            })\n                        }\n\n\n                    </div>\n\n                    <DialogActions>\n                        <Button onClick={closeRulesDialog}>\n                            Close\n                            </Button>\n                        <Button color=\"primary\" onClick={rulesUpdate}>\n                            {rulesLoader == true ? <CircularProgress /> : \"Update\"}\n                        </Button>\n                    </DialogActions>\n\n                </Dialog>\n            )\n        }\n    }\n\n    const generateUi = () => {\n        if (isLoading == true) {\n            return <LinearProgress />\n        } else {\n            return (\n                <div className={classes.gridParent}>\n\n                    {gridListJSX()}\n\n                    {createGameJSX()}\n\n                    {snackbarJSX()}\n\n                    {gameCard()}\n\n                    {playerCard()}\n\n                    {generateRulesDialog()}\n                </div>\n            )\n        }\n    }\n\n    return generateUi();\n}\n\nexport default Game;\n","import React from 'react';\n\n// const baseUrl = \"http://localhost:8080\"\n\n\nexport const getAllGames = () => {\n    return fetch(\"/games\")\n}\n\nexport const createGame = (payload) => {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \"players\": [...payload] })\n    };\n    return fetch(\"/start\", requestOptions)\n}\n\nexport const rollBall = (gameId) => {\n    return fetch(\"/roll/\" + gameId)\n}\n\nexport const getPlayerStats = (playerId) => {\n    return fetch(\"/players/\" + playerId)\n}\n\nexport const getRules = () => {\n    return fetch(\"/rules\")\n}\n\nexport const updateRules = (payload) => {\n    const requestOptions = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload)\n    };\n    return fetch(\"/rules\", requestOptions)\n}\n\nexport const deleteGame = (gameId) => {\n\n    const requestOptions = {\n        method: 'DELETE',\n    };\n    return fetch(\"/games/\" + gameId, requestOptions)\n}","import logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport React, { useState } from 'react';\nimport Navigation from './Components/Navigation/navigation';\nimport Game from './Components/Games/Game';\n\nfunction App() {\n  \n  const [openRulesDialog, setRulesDialogOpen] = useState(false)\n\n  const closeDialogRules = () => {\n    console.log(\"closing dialog\")\n    setRulesDialogOpen(false)\n  }\n  return (\n    <div className=\"App\">\n        <Router>\n          <Navigation setRulesDialogOpen={setRulesDialogOpen} />\n          <Switch>\n            <Route path=\"/\" exact>\n              <Game openRulesDialog={openRulesDialog} closeDialogRules={() => {closeDialogRules()}} />\n            </Route>\n          </Switch>\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}